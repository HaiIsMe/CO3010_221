
Lab3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002620  08002620  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002620  08002620  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000068  08002690  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002690  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088ae  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a77  00000000  00000000  0002893f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e53  00000000  00000000  0002b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdf7  00000000  00000000  0004258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f5a  00000000  00000000  0004e382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d02dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002854  00000000  00000000  000d032c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080025e8 	.word	0x080025e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080025e8 	.word	0x080025e8

0800014c <isButtonPressed>:
int keyReg2[4] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg3[4] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int button_flag[4] = { 0, 0, 0, 0 };
int timeForPress[4] = { 300, 300, 300, 300 };

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a0c      	ldr	r2, [pc, #48]	; (8000188 <isButtonPressed+0x3c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d10d      	bne.n	800017c <isButtonPressed+0x30>
		button_flag[0] = 0;
 8000160:	4b09      	ldr	r3, [pc, #36]	; (8000188 <isButtonPressed+0x3c>)
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
		button_flag[1] = 0;
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <isButtonPressed+0x3c>)
 8000168:	2200      	movs	r2, #0
 800016a:	605a      	str	r2, [r3, #4]
		button_flag[2] = 0;
 800016c:	4b06      	ldr	r3, [pc, #24]	; (8000188 <isButtonPressed+0x3c>)
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]
		button_flag[3] = 0;
 8000172:	4b05      	ldr	r3, [pc, #20]	; (8000188 <isButtonPressed+0x3c>)
 8000174:	2200      	movs	r2, #0
 8000176:	60da      	str	r2, [r3, #12]
		return 1;
 8000178:	2301      	movs	r3, #1
 800017a:	e000      	b.n	800017e <isButtonPressed+0x32>
	} else
		return 0;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000084 	.word	0x20000084

0800018c <subKeyProcess>:

void subKeyProcess(int index) {
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <subKeyProcess+0x1c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2101      	movs	r1, #1
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000084 	.word	0x20000084

080001ac <getInputKey>:

void getInputKey() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	e09c      	b.n	80002f2 <getInputKey+0x146>
		keyReg0[i] = keyReg1[i];
 80001b8:	4a52      	ldr	r2, [pc, #328]	; (8000304 <getInputKey+0x158>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4951      	ldr	r1, [pc, #324]	; (8000308 <getInputKey+0x15c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001c8:	4a50      	ldr	r2, [pc, #320]	; (800030c <getInputKey+0x160>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	494c      	ldr	r1, [pc, #304]	; (8000304 <getInputKey+0x158>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d83a      	bhi.n	8000254 <getInputKey+0xa8>
 80001de:	a201      	add	r2, pc, #4	; (adr r2, 80001e4 <getInputKey+0x38>)
 80001e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e4:	080001f5 	.word	0x080001f5
 80001e8:	0800020d 	.word	0x0800020d
 80001ec:	08000225 	.word	0x08000225
 80001f0:	0800023d 	.word	0x0800023d
		case MODE_BUTTON:
			keyReg2[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80001f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f8:	4845      	ldr	r0, [pc, #276]	; (8000310 <getInputKey+0x164>)
 80001fa:	f001 f9cd 	bl	8001598 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4a42      	ldr	r2, [pc, #264]	; (800030c <getInputKey+0x160>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800020a:	e024      	b.n	8000256 <getInputKey+0xaa>
		case INC_BUTTON:
			keyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 800020c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000210:	483f      	ldr	r0, [pc, #252]	; (8000310 <getInputKey+0x164>)
 8000212:	f001 f9c1 	bl	8001598 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	4619      	mov	r1, r3
 800021a:	4a3c      	ldr	r2, [pc, #240]	; (800030c <getInputKey+0x160>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000222:	e018      	b.n	8000256 <getInputKey+0xaa>
		case DEC_BUTTON:
			keyReg2[i] = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 8000224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000228:	4839      	ldr	r0, [pc, #228]	; (8000310 <getInputKey+0x164>)
 800022a:	f001 f9b5 	bl	8001598 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	4619      	mov	r1, r3
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getInputKey+0x160>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800023a:	e00c      	b.n	8000256 <getInputKey+0xaa>
		case APPLY_BUTTON:
			keyReg2[i] = HAL_GPIO_ReadPin(APPLY_GPIO_Port, APPLY_Pin);
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	4833      	ldr	r0, [pc, #204]	; (8000310 <getInputKey+0x164>)
 8000242:	f001 f9a9 	bl	8001598 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	4619      	mov	r1, r3
 800024a:	4a30      	ldr	r2, [pc, #192]	; (800030c <getInputKey+0x160>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000252:	e000      	b.n	8000256 <getInputKey+0xaa>
		default:
			break;
 8000254:	bf00      	nop
		}

		if ((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i])) {
 8000256:	4a2c      	ldr	r2, [pc, #176]	; (8000308 <getInputKey+0x15c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4929      	ldr	r1, [pc, #164]	; (8000304 <getInputKey+0x158>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d140      	bne.n	80002ec <getInputKey+0x140>
 800026a:	4a26      	ldr	r2, [pc, #152]	; (8000304 <getInputKey+0x158>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	4926      	ldr	r1, [pc, #152]	; (800030c <getInputKey+0x160>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d136      	bne.n	80002ec <getInputKey+0x140>
			if (keyReg2[i] != keyReg3[i]) {
 800027e:	4a23      	ldr	r2, [pc, #140]	; (800030c <getInputKey+0x160>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4923      	ldr	r1, [pc, #140]	; (8000314 <getInputKey+0x168>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028e:	429a      	cmp	r2, r3
 8000290:	d017      	beq.n	80002c2 <getInputKey+0x116>
				keyReg3[i] = keyReg2[i];
 8000292:	4a1e      	ldr	r2, [pc, #120]	; (800030c <getInputKey+0x160>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029a:	491e      	ldr	r1, [pc, #120]	; (8000314 <getInputKey+0x168>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == PRESSED_STATE) {
 80002a2:	4a1a      	ldr	r2, [pc, #104]	; (800030c <getInputKey+0x160>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d11e      	bne.n	80002ec <getInputKey+0x140>
					subKeyProcess(i);
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff6c 	bl	800018c <subKeyProcess>
					timeForPress[i] = 300;
 80002b4:	4a18      	ldr	r2, [pc, #96]	; (8000318 <getInputKey+0x16c>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c0:	e014      	b.n	80002ec <getInputKey+0x140>
				}
			} else {
				timeForPress[i]--;
 80002c2:	4a15      	ldr	r2, [pc, #84]	; (8000318 <getInputKey+0x16c>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	1e5a      	subs	r2, r3, #1
 80002cc:	4912      	ldr	r1, [pc, #72]	; (8000318 <getInputKey+0x16c>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeForPress[i] == 0) {
 80002d4:	4a10      	ldr	r2, [pc, #64]	; (8000318 <getInputKey+0x16c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d105      	bne.n	80002ec <getInputKey+0x140>
					timeForPress[i] = 300;
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <getInputKey+0x16c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	f77f af5f 	ble.w	80001b8 <getInputKey+0xc>
				}
			}
		}
	}
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000010 	.word	0x20000010
 8000308:	20000000 	.word	0x20000000
 800030c:	20000020 	.word	0x20000020
 8000310:	40010800 	.word	0x40010800
 8000314:	20000030 	.word	0x20000030
 8000318:	20000040 	.word	0x20000040

0800031c <turnSeg0>:
#include "ctr_7seg.h"

static uint8_t LED7_SEG[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
		0x80, 0x90 };

void turnSeg0(int num) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ((LED7_SEG[num] >> 0) & 0x01));
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <turnSeg0+0xd0>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	2101      	movs	r1, #1
 8000336:	482e      	ldr	r0, [pc, #184]	; (80003f0 <turnSeg0+0xd4>)
 8000338:	f001 f945 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ((LED7_SEG[num] >> 1) & 0x01));
 800033c:	4a2b      	ldr	r2, [pc, #172]	; (80003ec <turnSeg0+0xd0>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	085b      	lsrs	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	2102      	movs	r1, #2
 8000352:	4827      	ldr	r0, [pc, #156]	; (80003f0 <turnSeg0+0xd4>)
 8000354:	f001 f937 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ((LED7_SEG[num] >> 2) & 0x01));
 8000358:	4a24      	ldr	r2, [pc, #144]	; (80003ec <turnSeg0+0xd0>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	089b      	lsrs	r3, r3, #2
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	2104      	movs	r1, #4
 800036e:	4820      	ldr	r0, [pc, #128]	; (80003f0 <turnSeg0+0xd4>)
 8000370:	f001 f929 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ((LED7_SEG[num] >> 3) & 0x01));
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <turnSeg0+0xd0>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	08db      	lsrs	r3, r3, #3
 800037e:	b2db      	uxtb	r3, r3
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	461a      	mov	r2, r3
 8000388:	2108      	movs	r1, #8
 800038a:	4819      	ldr	r0, [pc, #100]	; (80003f0 <turnSeg0+0xd4>)
 800038c:	f001 f91b 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((LED7_SEG[num] >> 4) & 0x01));
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <turnSeg0+0xd0>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	091b      	lsrs	r3, r3, #4
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	2110      	movs	r1, #16
 80003a6:	4812      	ldr	r0, [pc, #72]	; (80003f0 <turnSeg0+0xd4>)
 80003a8:	f001 f90d 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((LED7_SEG[num] >> 5) & 0x01));
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <turnSeg0+0xd0>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	095b      	lsrs	r3, r3, #5
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	2120      	movs	r1, #32
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <turnSeg0+0xd4>)
 80003c4:	f001 f8ff 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((LED7_SEG[num] >> 6) & 0x01));
 80003c8:	4a08      	ldr	r2, [pc, #32]	; (80003ec <turnSeg0+0xd0>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	099b      	lsrs	r3, r3, #6
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4804      	ldr	r0, [pc, #16]	; (80003f0 <turnSeg0+0xd4>)
 80003e0:	f001 f8f1 	bl	80015c6 <HAL_GPIO_WritePin>
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000050 	.word	0x20000050
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <turnSeg1>:

void turnSeg1(int num) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((LED7_SEG[num] >> 0) & 0x01));
 80003fc:	4a34      	ldr	r2, [pc, #208]	; (80004d0 <turnSeg1+0xdc>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	4831      	ldr	r0, [pc, #196]	; (80004d4 <turnSeg1+0xe0>)
 8000410:	f001 f8d9 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, ((LED7_SEG[num] >> 1) & 0x01));
 8000414:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <turnSeg1+0xdc>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	085b      	lsrs	r3, r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042c:	4829      	ldr	r0, [pc, #164]	; (80004d4 <turnSeg1+0xe0>)
 800042e:	f001 f8ca 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, ((LED7_SEG[num] >> 2) & 0x01));
 8000432:	4a27      	ldr	r2, [pc, #156]	; (80004d0 <turnSeg1+0xdc>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	089b      	lsrs	r3, r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044a:	4822      	ldr	r0, [pc, #136]	; (80004d4 <turnSeg1+0xe0>)
 800044c:	f001 f8bb 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ((LED7_SEG[num] >> 3) & 0x01));
 8000450:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <turnSeg1+0xdc>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	481a      	ldr	r0, [pc, #104]	; (80004d4 <turnSeg1+0xe0>)
 800046a:	f001 f8ac 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, ((LED7_SEG[num] >> 4) & 0x01));
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <turnSeg1+0xdc>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	091b      	lsrs	r3, r3, #4
 8000478:	b2db      	uxtb	r3, r3
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000486:	4813      	ldr	r0, [pc, #76]	; (80004d4 <turnSeg1+0xe0>)
 8000488:	f001 f89d 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, ((LED7_SEG[num] >> 5) & 0x01));
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <turnSeg1+0xdc>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	095b      	lsrs	r3, r3, #5
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	480b      	ldr	r0, [pc, #44]	; (80004d4 <turnSeg1+0xe0>)
 80004a6:	f001 f88e 	bl	80015c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, ((LED7_SEG[num] >> 6) & 0x01));
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <turnSeg1+0xdc>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4413      	add	r3, r2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	099b      	lsrs	r3, r3, #6
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <turnSeg1+0xe0>)
 80004c4:	f001 f87f 	bl	80015c6 <HAL_GPIO_WritePin>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000050 	.word	0x20000050
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <enableSeg>:

void enableSeg(int num1, int num2) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	switch (stateSeg) {
 80004e2:	4b5f      	ldr	r3, [pc, #380]	; (8000660 <enableSeg+0x188>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d070      	beq.n	80005cc <enableSeg+0xf4>
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	f300 80af 	bgt.w	800064e <enableSeg+0x176>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d002      	beq.n	80004fa <enableSeg+0x22>
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d032      	beq.n	800055e <enableSeg+0x86>
			stateSeg = 1;
			setTimerEnable();
		}
		break;
	default:
		break;
 80004f8:	e0a9      	b.n	800064e <enableSeg+0x176>
		turnSeg0(num1 / 10);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a59      	ldr	r2, [pc, #356]	; (8000664 <enableSeg+0x18c>)
 80004fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000502:	1092      	asrs	r2, r2, #2
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff07 	bl	800031c <turnSeg0>
		turnSeg1(num2 / 10);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	4a54      	ldr	r2, [pc, #336]	; (8000664 <enableSeg+0x18c>)
 8000512:	fb82 1203 	smull	r1, r2, r2, r3
 8000516:	1092      	asrs	r2, r2, #2
 8000518:	17db      	asrs	r3, r3, #31
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff69 	bl	80003f4 <turnSeg1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000528:	484f      	ldr	r0, [pc, #316]	; (8000668 <enableSeg+0x190>)
 800052a:	f001 f84c 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000534:	484c      	ldr	r0, [pc, #304]	; (8000668 <enableSeg+0x190>)
 8000536:	f001 f846 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	484a      	ldr	r0, [pc, #296]	; (800066c <enableSeg+0x194>)
 8000542:	f001 f840 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4847      	ldr	r0, [pc, #284]	; (800066c <enableSeg+0x194>)
 800054e:	f001 f83a 	bl	80015c6 <HAL_GPIO_WritePin>
		stateSeg = 1;
 8000552:	4b43      	ldr	r3, [pc, #268]	; (8000660 <enableSeg+0x188>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
		setTimerEnable();
 8000558:	f000 fc20 	bl	8000d9c <setTimerEnable>
		break;
 800055c:	e07c      	b.n	8000658 <enableSeg+0x180>
		turnSeg0(num1 / 10);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a40      	ldr	r2, [pc, #256]	; (8000664 <enableSeg+0x18c>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1092      	asrs	r2, r2, #2
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fed5 	bl	800031c <turnSeg0>
		turnSeg1(num2 / 10);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	4a3b      	ldr	r2, [pc, #236]	; (8000664 <enableSeg+0x18c>)
 8000576:	fb82 1203 	smull	r1, r2, r2, r3
 800057a:	1092      	asrs	r2, r2, #2
 800057c:	17db      	asrs	r3, r3, #31
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff37 	bl	80003f4 <turnSeg1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058c:	4836      	ldr	r0, [pc, #216]	; (8000668 <enableSeg+0x190>)
 800058e:	f001 f81a 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	4833      	ldr	r0, [pc, #204]	; (8000668 <enableSeg+0x190>)
 800059a:	f001 f814 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	4831      	ldr	r0, [pc, #196]	; (800066c <enableSeg+0x194>)
 80005a6:	f001 f80e 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b0:	482e      	ldr	r0, [pc, #184]	; (800066c <enableSeg+0x194>)
 80005b2:	f001 f808 	bl	80015c6 <HAL_GPIO_WritePin>
		if (enableFlag() == 1) {
 80005b6:	f000 fba9 	bl	8000d0c <enableFlag>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d148      	bne.n	8000652 <enableSeg+0x17a>
			stateSeg = 2;
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <enableSeg+0x188>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	601a      	str	r2, [r3, #0]
			setTimerEnable();
 80005c6:	f000 fbe9 	bl	8000d9c <setTimerEnable>
		break;
 80005ca:	e042      	b.n	8000652 <enableSeg+0x17a>
		turnSeg0(num1 % 10);
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <enableSeg+0x18c>)
 80005d0:	fb83 1302 	smull	r1, r3, r3, r2
 80005d4:	1099      	asrs	r1, r3, #2
 80005d6:	17d3      	asrs	r3, r2, #31
 80005d8:	1ac9      	subs	r1, r1, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	440b      	add	r3, r1
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	1ad1      	subs	r1, r2, r3
 80005e4:	4608      	mov	r0, r1
 80005e6:	f7ff fe99 	bl	800031c <turnSeg0>
		turnSeg1(num2 % 10);
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <enableSeg+0x18c>)
 80005ee:	fb83 1302 	smull	r1, r3, r3, r2
 80005f2:	1099      	asrs	r1, r3, #2
 80005f4:	17d3      	asrs	r3, r2, #31
 80005f6:	1ac9      	subs	r1, r1, r3
 80005f8:	460b      	mov	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1ad1      	subs	r1, r2, r3
 8000602:	4608      	mov	r0, r1
 8000604:	f7ff fef6 	bl	80003f4 <turnSeg1>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <enableSeg+0x190>)
 8000610:	f000 ffd9 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <enableSeg+0x190>)
 800061c:	f000 ffd3 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <enableSeg+0x194>)
 8000628:	f000 ffcd 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <enableSeg+0x194>)
 8000634:	f000 ffc7 	bl	80015c6 <HAL_GPIO_WritePin>
		if (enableFlag() == 1) {
 8000638:	f000 fb68 	bl	8000d0c <enableFlag>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d109      	bne.n	8000656 <enableSeg+0x17e>
			stateSeg = 1;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <enableSeg+0x188>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
			setTimerEnable();
 8000648:	f000 fba8 	bl	8000d9c <setTimerEnable>
		break;
 800064c:	e003      	b.n	8000656 <enableSeg+0x17e>
		break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <enableSeg+0x180>
		break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <enableSeg+0x180>
		break;
 8000656:	bf00      	nop
	}
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	66666667 	.word	0x66666667
 8000668:	40010800 	.word	0x40010800
 800066c:	40010c00 	.word	0x40010c00

08000670 <fsm_automatic_run>:
#include "fsm_automatic.h"

void fsm_automatic_run() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	switch (state) {
 8000674:	4b8d      	ldr	r3, [pc, #564]	; (80008ac <fsm_automatic_run+0x23c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b02      	cmp	r3, #2
 800067a:	f000 80a6 	beq.w	80007ca <fsm_automatic_run+0x15a>
 800067e:	2b02      	cmp	r3, #2
 8000680:	f300 810d 	bgt.w	800089e <fsm_automatic_run+0x22e>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <fsm_automatic_run+0x1e>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d034      	beq.n	80006f6 <fsm_automatic_run+0x86>
		}
		if (isButtonPressed(MODE_BUTTON))
			state = RED_MODE;
		break;
	default:
		break;
 800068c:	e107      	b.n	800089e <fsm_automatic_run+0x22e>
		number1 = durForRed - 1;
 800068e:	4b88      	ldr	r3, [pc, #544]	; (80008b0 <fsm_automatic_run+0x240>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a87      	ldr	r2, [pc, #540]	; (80008b4 <fsm_automatic_run+0x244>)
 8000696:	6013      	str	r3, [r2, #0]
		number2 = durForGreen - 1;
 8000698:	4b87      	ldr	r3, [pc, #540]	; (80008b8 <fsm_automatic_run+0x248>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a87      	ldr	r2, [pc, #540]	; (80008bc <fsm_automatic_run+0x24c>)
 80006a0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2110      	movs	r1, #16
 80006a6:	4886      	ldr	r0, [pc, #536]	; (80008c0 <fsm_automatic_run+0x250>)
 80006a8:	f000 ff8d 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	4883      	ldr	r0, [pc, #524]	; (80008c0 <fsm_automatic_run+0x250>)
 80006b2:	f000 ff88 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4881      	ldr	r0, [pc, #516]	; (80008c0 <fsm_automatic_run+0x250>)
 80006bc:	f000 ff83 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	487e      	ldr	r0, [pc, #504]	; (80008c0 <fsm_automatic_run+0x250>)
 80006c6:	f000 ff7e 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	487b      	ldr	r0, [pc, #492]	; (80008c0 <fsm_automatic_run+0x250>)
 80006d2:	f000 ff78 	bl	80015c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	4878      	ldr	r0, [pc, #480]	; (80008c0 <fsm_automatic_run+0x250>)
 80006de:	f000 ff72 	bl	80015c6 <HAL_GPIO_WritePin>
		setTimerRed();
 80006e2:	f000 fb37 	bl	8000d54 <setTimerRed>
		setTimerGreen();
 80006e6:	f000 fb47 	bl	8000d78 <setTimerGreen>
		setOneSecond();
 80006ea:	f000 fb63 	bl	8000db4 <setOneSecond>
		state = EastWest;
 80006ee:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <fsm_automatic_run+0x23c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
		break;
 80006f4:	e0d8      	b.n	80008a8 <fsm_automatic_run+0x238>
		if (oneSecondFlag() == 1) {
 80006f6:	f000 fb1b 	bl	8000d30 <oneSecondFlag>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10b      	bne.n	8000718 <fsm_automatic_run+0xa8>
			number1--;
 8000700:	4b6c      	ldr	r3, [pc, #432]	; (80008b4 <fsm_automatic_run+0x244>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a6b      	ldr	r2, [pc, #428]	; (80008b4 <fsm_automatic_run+0x244>)
 8000708:	6013      	str	r3, [r2, #0]
			number2--;
 800070a:	4b6c      	ldr	r3, [pc, #432]	; (80008bc <fsm_automatic_run+0x24c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a6a      	ldr	r2, [pc, #424]	; (80008bc <fsm_automatic_run+0x24c>)
 8000712:	6013      	str	r3, [r2, #0]
			setOneSecond();
 8000714:	f000 fb4e 	bl	8000db4 <setOneSecond>
		if (greenFlag() == 1) {
 8000718:	f000 fae6 	bl	8000ce8 <greenFlag>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d113      	bne.n	800074a <fsm_automatic_run+0xda>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000728:	4865      	ldr	r0, [pc, #404]	; (80008c0 <fsm_automatic_run+0x250>)
 800072a:	f000 ff4c 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	4862      	ldr	r0, [pc, #392]	; (80008c0 <fsm_automatic_run+0x250>)
 8000736:	f000 ff46 	bl	80015c6 <HAL_GPIO_WritePin>
			number2 = durForRed - durForGreen - 1;
 800073a:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <fsm_automatic_run+0x240>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <fsm_automatic_run+0x248>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	3b01      	subs	r3, #1
 8000746:	4a5d      	ldr	r2, [pc, #372]	; (80008bc <fsm_automatic_run+0x24c>)
 8000748:	6013      	str	r3, [r2, #0]
		if (redFlag() == 1) {
 800074a:	f000 fabb 	bl	8000cc4 <redFlag>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d130      	bne.n	80007b6 <fsm_automatic_run+0x146>
			number1 = durForGreen;
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <fsm_automatic_run+0x248>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a56      	ldr	r2, [pc, #344]	; (80008b4 <fsm_automatic_run+0x244>)
 800075a:	6013      	str	r3, [r2, #0]
			number2 = durForRed;
 800075c:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <fsm_automatic_run+0x240>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a56      	ldr	r2, [pc, #344]	; (80008bc <fsm_automatic_run+0x24c>)
 8000762:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4855      	ldr	r0, [pc, #340]	; (80008c0 <fsm_automatic_run+0x250>)
 800076a:	f000 ff2c 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2120      	movs	r1, #32
 8000772:	4853      	ldr	r0, [pc, #332]	; (80008c0 <fsm_automatic_run+0x250>)
 8000774:	f000 ff27 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	4850      	ldr	r0, [pc, #320]	; (80008c0 <fsm_automatic_run+0x250>)
 800077e:	f000 ff22 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	484e      	ldr	r0, [pc, #312]	; (80008c0 <fsm_automatic_run+0x250>)
 8000788:	f000 ff1d 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	484b      	ldr	r0, [pc, #300]	; (80008c0 <fsm_automatic_run+0x250>)
 8000794:	f000 ff17 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079e:	4848      	ldr	r0, [pc, #288]	; (80008c0 <fsm_automatic_run+0x250>)
 80007a0:	f000 ff11 	bl	80015c6 <HAL_GPIO_WritePin>
			setTimerRed();
 80007a4:	f000 fad6 	bl	8000d54 <setTimerRed>
			setTimerGreen();
 80007a8:	f000 fae6 	bl	8000d78 <setTimerGreen>
			setOneSecond();
 80007ac:	f000 fb02 	bl	8000db4 <setOneSecond>
			state = NorthSouth;
 80007b0:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <fsm_automatic_run+0x23c>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(MODE_BUTTON))
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fcc8 	bl	800014c <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d06f      	beq.n	80008a2 <fsm_automatic_run+0x232>
			state = RED_MODE;
 80007c2:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <fsm_automatic_run+0x23c>)
 80007c4:	2203      	movs	r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e06b      	b.n	80008a2 <fsm_automatic_run+0x232>
		if (oneSecondFlag() == 1) {
 80007ca:	f000 fab1 	bl	8000d30 <oneSecondFlag>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10b      	bne.n	80007ec <fsm_automatic_run+0x17c>
			number1--;
 80007d4:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <fsm_automatic_run+0x244>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <fsm_automatic_run+0x244>)
 80007dc:	6013      	str	r3, [r2, #0]
			number2--;
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <fsm_automatic_run+0x24c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	4a35      	ldr	r2, [pc, #212]	; (80008bc <fsm_automatic_run+0x24c>)
 80007e6:	6013      	str	r3, [r2, #0]
			setOneSecond();
 80007e8:	f000 fae4 	bl	8000db4 <setOneSecond>
		if (greenFlag() == 1) {
 80007ec:	f000 fa7c 	bl	8000ce8 <greenFlag>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d111      	bne.n	800081a <fsm_automatic_run+0x1aa>
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4831      	ldr	r0, [pc, #196]	; (80008c0 <fsm_automatic_run+0x250>)
 80007fc:	f000 fee3 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	482e      	ldr	r0, [pc, #184]	; (80008c0 <fsm_automatic_run+0x250>)
 8000806:	f000 fede 	bl	80015c6 <HAL_GPIO_WritePin>
			number1 = durForRed - durForGreen - 1;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <fsm_automatic_run+0x240>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <fsm_automatic_run+0x248>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <fsm_automatic_run+0x244>)
 8000818:	6013      	str	r3, [r2, #0]
		if (redFlag() == 1) {
 800081a:	f000 fa53 	bl	8000cc4 <redFlag>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d132      	bne.n	800088a <fsm_automatic_run+0x21a>
			number1 = durForRed - 1;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <fsm_automatic_run+0x240>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <fsm_automatic_run+0x244>)
 800082c:	6013      	str	r3, [r2, #0]
			number2 = durForGreen - 1;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <fsm_automatic_run+0x248>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3b01      	subs	r3, #1
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <fsm_automatic_run+0x24c>)
 8000836:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	4820      	ldr	r0, [pc, #128]	; (80008c0 <fsm_automatic_run+0x250>)
 800083e:	f000 fec2 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <fsm_automatic_run+0x250>)
 8000848:	f000 febd 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <fsm_automatic_run+0x250>)
 8000852:	f000 feb8 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <fsm_automatic_run+0x250>)
 800085c:	f000 feb3 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <fsm_automatic_run+0x250>)
 8000868:	f000 fead 	bl	80015c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <fsm_automatic_run+0x250>)
 8000874:	f000 fea7 	bl	80015c6 <HAL_GPIO_WritePin>
			setTimerRed();
 8000878:	f000 fa6c 	bl	8000d54 <setTimerRed>
			setTimerGreen();
 800087c:	f000 fa7c 	bl	8000d78 <setTimerGreen>
			setOneSecond();
 8000880:	f000 fa98 	bl	8000db4 <setOneSecond>
			state = EastWest;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <fsm_automatic_run+0x23c>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(MODE_BUTTON))
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fc5e 	bl	800014c <isButtonPressed>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <fsm_automatic_run+0x236>
			state = RED_MODE;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <fsm_automatic_run+0x23c>)
 8000898:	2203      	movs	r2, #3
 800089a:	601a      	str	r2, [r3, #0]
		break;
 800089c:	e003      	b.n	80008a6 <fsm_automatic_run+0x236>
		break;
 800089e:	bf00      	nop
 80008a0:	e002      	b.n	80008a8 <fsm_automatic_run+0x238>
		break;
 80008a2:	bf00      	nop
 80008a4:	e000      	b.n	80008a8 <fsm_automatic_run+0x238>
		break;
 80008a6:	bf00      	nop
	}
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000094 	.word	0x20000094
 80008b0:	2000009c 	.word	0x2000009c
 80008b4:	200000a4 	.word	0x200000a4
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	200000a8 	.word	0x200000a8
 80008c0:	40010800 	.word	0x40010800

080008c4 <fsm_manual_run>:
#include "fsm_manual.h"

void fsm_manual_run() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	switch (state) {
 80008c8:	4b65      	ldr	r3, [pc, #404]	; (8000a60 <fsm_manual_run+0x19c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b05      	cmp	r3, #5
 80008ce:	f000 8082 	beq.w	80009d6 <fsm_manual_run+0x112>
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	f300 80bb 	bgt.w	8000a4e <fsm_manual_run+0x18a>
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d002      	beq.n	80008e2 <fsm_manual_run+0x1e>
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d03d      	beq.n	800095c <fsm_manual_run+0x98>
		} else if (isButtonPressed(APPLY_BUTTON) == 1) {
			state = INIT;
		}
		break;
	default:
		break;
 80008e0:	e0b5      	b.n	8000a4e <fsm_manual_run+0x18a>
		number1 = 2;
 80008e2:	4b60      	ldr	r3, [pc, #384]	; (8000a64 <fsm_manual_run+0x1a0>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
		number2 = durForRed;
 80008e8:	4b5f      	ldr	r3, [pc, #380]	; (8000a68 <fsm_manual_run+0x1a4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a5f      	ldr	r2, [pc, #380]	; (8000a6c <fsm_manual_run+0x1a8>)
 80008ee:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(MODE_BUTTON) == 1) {
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fc2b 	bl	800014c <isButtonPressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d103      	bne.n	8000904 <fsm_manual_run+0x40>
			state = YELLOW_MODE;
 80008fc:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <fsm_manual_run+0x19c>)
 80008fe:	2204      	movs	r2, #4
 8000900:	601a      	str	r2, [r3, #0]
		break;
 8000902:	e0a6      	b.n	8000a52 <fsm_manual_run+0x18e>
		} else if (isButtonPressed(INC_BUTTON) == 1) {
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fc21 	bl	800014c <isButtonPressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10a      	bne.n	8000926 <fsm_manual_run+0x62>
			durForRed++;
 8000910:	4b55      	ldr	r3, [pc, #340]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a54      	ldr	r2, [pc, #336]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000918:	6013      	str	r3, [r2, #0]
			durForGreen++;
 800091a:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <fsm_manual_run+0x1ac>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	4a53      	ldr	r2, [pc, #332]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000922:	6013      	str	r3, [r2, #0]
		break;
 8000924:	e095      	b.n	8000a52 <fsm_manual_run+0x18e>
		} else if (isButtonPressed(DEC_BUTTON) == 1) {
 8000926:	2002      	movs	r0, #2
 8000928:	f7ff fc10 	bl	800014c <isButtonPressed>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d10a      	bne.n	8000948 <fsm_manual_run+0x84>
			if (durForRed > 2)
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b02      	cmp	r3, #2
 8000938:	f340 808b 	ble.w	8000a52 <fsm_manual_run+0x18e>
				durForRed--;
 800093c:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <fsm_manual_run+0x1a4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a49      	ldr	r2, [pc, #292]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000944:	6013      	str	r3, [r2, #0]
		break;
 8000946:	e084      	b.n	8000a52 <fsm_manual_run+0x18e>
		} else if (isButtonPressed(APPLY_BUTTON) == 1) {
 8000948:	2003      	movs	r0, #3
 800094a:	f7ff fbff 	bl	800014c <isButtonPressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d17e      	bne.n	8000a52 <fsm_manual_run+0x18e>
			state = INIT;
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <fsm_manual_run+0x19c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
		break;
 800095a:	e07a      	b.n	8000a52 <fsm_manual_run+0x18e>
		number1 = 3;
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <fsm_manual_run+0x1a0>)
 800095e:	2203      	movs	r2, #3
 8000960:	601a      	str	r2, [r3, #0]
		number2 = durForRed - durForGreen;
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <fsm_manual_run+0x1a8>)
 800096e:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(MODE_BUTTON) == 1) {
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fbeb 	bl	800014c <isButtonPressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d103      	bne.n	8000984 <fsm_manual_run+0xc0>
			state = GREEN_MODE;
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <fsm_manual_run+0x19c>)
 800097e:	2205      	movs	r2, #5
 8000980:	601a      	str	r2, [r3, #0]
		break;
 8000982:	e068      	b.n	8000a56 <fsm_manual_run+0x192>
		} else if (isButtonPressed(INC_BUTTON) == 1) {
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fbe1 	bl	800014c <isButtonPressed>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d105      	bne.n	800099c <fsm_manual_run+0xd8>
			durForRed++;
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a34      	ldr	r2, [pc, #208]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000998:	6013      	str	r3, [r2, #0]
		break;
 800099a:	e05c      	b.n	8000a56 <fsm_manual_run+0x192>
		} else if (isButtonPressed(DEC_BUTTON) == 1) {
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff fbd5 	bl	800014c <isButtonPressed>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d10c      	bne.n	80009c2 <fsm_manual_run+0xfe>
			if (durForRed - durForGreen > 1) {
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <fsm_manual_run+0x1a4>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <fsm_manual_run+0x1ac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	dd4f      	ble.n	8000a56 <fsm_manual_run+0x192>
				durForRed--;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <fsm_manual_run+0x1a4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <fsm_manual_run+0x1a4>)
 80009be:	6013      	str	r3, [r2, #0]
		break;
 80009c0:	e049      	b.n	8000a56 <fsm_manual_run+0x192>
		} else if (isButtonPressed(APPLY_BUTTON) == 1) {
 80009c2:	2003      	movs	r0, #3
 80009c4:	f7ff fbc2 	bl	800014c <isButtonPressed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d143      	bne.n	8000a56 <fsm_manual_run+0x192>
			state = INIT;
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <fsm_manual_run+0x19c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		break;
 80009d4:	e03f      	b.n	8000a56 <fsm_manual_run+0x192>
		number1 = 4;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <fsm_manual_run+0x1a0>)
 80009d8:	2204      	movs	r2, #4
 80009da:	601a      	str	r2, [r3, #0]
		number2 = durForGreen;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <fsm_manual_run+0x1ac>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <fsm_manual_run+0x1a8>)
 80009e2:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(MODE_BUTTON) == 1) {
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fbb1 	bl	800014c <isButtonPressed>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d103      	bne.n	80009f8 <fsm_manual_run+0x134>
			state = INIT;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <fsm_manual_run+0x19c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
		break;
 80009f6:	e030      	b.n	8000a5a <fsm_manual_run+0x196>
		} else if (isButtonPressed(INC_BUTTON) == 1) {
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fba7 	bl	800014c <isButtonPressed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10a      	bne.n	8000a1a <fsm_manual_run+0x156>
			durForRed++;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <fsm_manual_run+0x1a4>)
 8000a0c:	6013      	str	r3, [r2, #0]
			durForGreen++;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000a16:	6013      	str	r3, [r2, #0]
		break;
 8000a18:	e01f      	b.n	8000a5a <fsm_manual_run+0x196>
		} else if (isButtonPressed(DEC_BUTTON) == 1) {
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f7ff fb96 	bl	800014c <isButtonPressed>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d109      	bne.n	8000a3a <fsm_manual_run+0x176>
			if (durForGreen > 1)
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	dd15      	ble.n	8000a5a <fsm_manual_run+0x196>
				durForGreen--;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <fsm_manual_run+0x1ac>)
 8000a36:	6013      	str	r3, [r2, #0]
		break;
 8000a38:	e00f      	b.n	8000a5a <fsm_manual_run+0x196>
		} else if (isButtonPressed(APPLY_BUTTON) == 1) {
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff fb86 	bl	800014c <isButtonPressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d109      	bne.n	8000a5a <fsm_manual_run+0x196>
			state = INIT;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <fsm_manual_run+0x19c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		break;
 8000a4c:	e005      	b.n	8000a5a <fsm_manual_run+0x196>
		break;
 8000a4e:	bf00      	nop
 8000a50:	e004      	b.n	8000a5c <fsm_manual_run+0x198>
		break;
 8000a52:	bf00      	nop
 8000a54:	e002      	b.n	8000a5c <fsm_manual_run+0x198>
		break;
 8000a56:	bf00      	nop
 8000a58:	e000      	b.n	8000a5c <fsm_manual_run+0x198>
		break;
 8000a5a:	bf00      	nop
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000094 	.word	0x20000094
 8000a64:	200000a4 	.word	0x200000a4
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	200000a8 	.word	0x200000a8
 8000a70:	200000a0 	.word	0x200000a0

08000a74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a78:	f000 faa2 	bl	8000fc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a7c:	f000 f824 	bl	8000ac8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a80:	f000 f8aa 	bl	8000bd8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000a84:	f000 f85c 	bl	8000b40 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <main+0x40>)
 8000a8a:	f001 f9ed 	bl	8001e68 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	durForRed = 4;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <main+0x44>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	601a      	str	r2, [r3, #0]
	durForGreen = 2;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <main+0x48>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
	while (1) {
		fsm_automatic_run();
 8000a9a:	f7ff fde9 	bl	8000670 <fsm_automatic_run>
		fsm_manual_run();
 8000a9e:	f7ff ff11 	bl	80008c4 <fsm_manual_run>
		enableSeg(number1, number2);
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <main+0x4c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <main+0x50>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd13 	bl	80004d8 <enableSeg>
		fsm_automatic_run();
 8000ab2:	e7f2      	b.n	8000a9a <main+0x26>
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	2000009c 	.word	0x2000009c
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	200000a4 	.word	0x200000a4
 8000ac4:	200000a8 	.word	0x200000a8

08000ac8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd7e 	bl	80025d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af2:	2310      	movs	r3, #16
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fd7a 	bl	80015f8 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x46>
		Error_Handler();
 8000b0a:	f000 f8d5 	bl	8000cb8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ffe8 	bl	8001afc <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x6e>
		Error_Handler();
 8000b32:	f000 f8c1 	bl	8000cb8 <Error_Handler>
	}
}
 8000b36:	bf00      	nop
 8000b38:	3740      	adds	r7, #64	; 0x40
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b6a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b74:	2209      	movs	r2, #9
 8000b76:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000b86:	f001 f91f 	bl	8001dc8 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000b90:	f000 f892 	bl	8000cb8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000ba2:	f001 fab5 	bl	8002110 <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000bac:	f000 f884 	bl	8000cb8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_TIM2_Init+0x94>)
 8000bbe:	f001 fc7d 	bl	80024bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000bc8:	f000 f876 	bl	8000cb8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000ac 	.word	0x200000ac

08000bd8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_GPIO_Init+0xbc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f24c 31f0 	movw	r1, #50160	; 0xc3f0
 8000c22:	481d      	ldr	r0, [pc, #116]	; (8000c98 <MX_GPIO_Init+0xc0>)
 8000c24:	f000 fccf 	bl	80015c6 <HAL_GPIO_WritePin>
	R0_Pin | Y0_Pin | G0_Pin | R1_Pin | Y1_Pin | G1_Pin | EN0_Pin | EN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_GPIO_Init+0xc4>)
 8000c30:	f000 fcc9 	bl	80015c6 <HAL_GPIO_WritePin>
					| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
					| GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : R0_Pin Y0_Pin G0_Pin R1_Pin
	 Y1_Pin G1_Pin EN0_Pin EN1_Pin */
	GPIO_InitStruct.Pin = R0_Pin | Y0_Pin | G0_Pin | R1_Pin | Y1_Pin | G1_Pin
 8000c34:	f24c 33f0 	movw	r3, #50160	; 0xc3f0
 8000c38:	60bb      	str	r3, [r7, #8]
			| EN0_Pin | EN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2302      	movs	r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4812      	ldr	r0, [pc, #72]	; (8000c98 <MX_GPIO_Init+0xc0>)
 8000c4e:	f000 fb27 	bl	80012a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 EN2_Pin
	 EN3_Pin PB3 PB4 PB5
	 PB6 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 8000c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c56:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | EN2_Pin | EN3_Pin
			| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_GPIO_Init+0xc4>)
 8000c6c:	f000 fb18 	bl	80012a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MODE_Pin INC_Pin DEC_Pin APPLY_Pin */
	GPIO_InitStruct.Pin = MODE_Pin | INC_Pin | DEC_Pin | APPLY_Pin;
 8000c70:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000c74:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GPIO_Init+0xc0>)
 8000c86:	f000 fb0b 	bl	80012a0 <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	getInputKey();
 8000ca8:	f7ff fa80 	bl	80001ac <getInputKey>
	timerRun();
 8000cac:	f000 f88e 	bl	8000dcc <timerRun>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <redFlag>:
int timerEnable_counter = 0;

int oneSecond_flag = 0;
int oneSecond_counter = 0;

int redFlag() {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	if (timerRed_flag == 1) {
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <redFlag+0x20>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <redFlag+0x16>
		timerRed_flag = 0;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <redFlag+0x20>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		return 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <redFlag+0x18>
	} else
		return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	200000f4 	.word	0x200000f4

08000ce8 <greenFlag>:

int greenFlag() {
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	if (timerGreen_flag == 1) {
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <greenFlag+0x20>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d104      	bne.n	8000cfe <greenFlag+0x16>
		timerGreen_flag = 0;
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <greenFlag+0x20>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		return 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <greenFlag+0x18>
	} else
		return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	200000fc 	.word	0x200000fc

08000d0c <enableFlag>:

int enableFlag() {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	if (timerEnable_flag == 1) {
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <enableFlag+0x20>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d104      	bne.n	8000d22 <enableFlag+0x16>
		timerEnable_flag = 0;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <enableFlag+0x20>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
		return 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <enableFlag+0x18>
	} else
		return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000104 	.word	0x20000104

08000d30 <oneSecondFlag>:

int oneSecondFlag() {
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	if (oneSecond_flag == 1) {
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <oneSecondFlag+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d104      	bne.n	8000d46 <oneSecondFlag+0x16>
		oneSecond_flag = 0;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <oneSecondFlag+0x20>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		return 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <oneSecondFlag+0x18>
	} else
		return 0;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	2000010c 	.word	0x2000010c

08000d54 <setTimerRed>:

void setTimerRed() {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	timerRed_counter = durForRed * 100;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <setTimerRed+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2264      	movs	r2, #100	; 0x64
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <setTimerRed+0x20>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000009c 	.word	0x2000009c
 8000d74:	200000f8 	.word	0x200000f8

08000d78 <setTimerGreen>:

void setTimerGreen() {
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	timerGreen_counter = durForGreen * 100;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <setTimerGreen+0x1c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2264      	movs	r2, #100	; 0x64
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <setTimerGreen+0x20>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000a0 	.word	0x200000a0
 8000d98:	20000100 	.word	0x20000100

08000d9c <setTimerEnable>:

void setTimerEnable() {
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	timerEnable_counter = 50;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <setTimerEnable+0x14>)
 8000da2:	2232      	movs	r2, #50	; 0x32
 8000da4:	601a      	str	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000108 	.word	0x20000108

08000db4 <setOneSecond>:

void setOneSecond() {
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
	oneSecond_counter = 100;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <setOneSecond+0x14>)
 8000dba:	2264      	movs	r2, #100	; 0x64
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000110 	.word	0x20000110

08000dcc <timerRun>:

void timerRun() {
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	if (timerRed_counter > 0) {
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <timerRun+0x8c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd0b      	ble.n	8000df0 <timerRun+0x24>
		timerRed_counter--;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <timerRun+0x8c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <timerRun+0x8c>)
 8000de0:	6013      	str	r3, [r2, #0]
		if (timerRed_counter == 0)
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <timerRun+0x8c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <timerRun+0x24>
			timerRed_flag = 1;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <timerRun+0x90>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
	}
	if (timerGreen_counter > 0) {
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <timerRun+0x94>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd0b      	ble.n	8000e10 <timerRun+0x44>
		timerGreen_counter--;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <timerRun+0x94>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <timerRun+0x94>)
 8000e00:	6013      	str	r3, [r2, #0]
		if (timerGreen_counter == 0)
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <timerRun+0x94>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <timerRun+0x44>
			timerGreen_flag = 1;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <timerRun+0x98>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
	}
	if (timerEnable_counter > 0) {
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <timerRun+0x9c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	dd0b      	ble.n	8000e30 <timerRun+0x64>
		timerEnable_counter--;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <timerRun+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <timerRun+0x9c>)
 8000e20:	6013      	str	r3, [r2, #0]
		if (timerEnable_counter == 0)
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <timerRun+0x9c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <timerRun+0x64>
			timerEnable_flag = 1;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <timerRun+0xa0>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
	}
	if (oneSecond_counter > 0) {
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <timerRun+0xa4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	dd0b      	ble.n	8000e50 <timerRun+0x84>
		oneSecond_counter--;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <timerRun+0xa4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <timerRun+0xa4>)
 8000e40:	6013      	str	r3, [r2, #0]
		if (oneSecond_counter == 0)
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <timerRun+0xa4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <timerRun+0x84>
			oneSecond_flag = 1;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <timerRun+0xa8>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
	}
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	200000f8 	.word	0x200000f8
 8000e5c:	200000f4 	.word	0x200000f4
 8000e60:	20000100 	.word	0x20000100
 8000e64:	200000fc 	.word	0x200000fc
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	20000104 	.word	0x20000104
 8000e70:	20000110 	.word	0x20000110
 8000e74:	2000010c 	.word	0x2000010c

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_MspInit+0x40>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_MspInit+0x40>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_MspInit+0x40>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_MspInit+0x40>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_MspInit+0x40>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_MspInit+0x40>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201c      	movs	r0, #28
 8000eec:	f000 f9a1 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef0:	201c      	movs	r0, #28
 8000ef2:	f000 f9ba 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f87f 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM2_IRQHandler+0x10>)
 8000f5a:	f000 ffd1 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000ac 	.word	0x200000ac

08000f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f9a:	f7ff ffe5 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f001 faf7 	bl	8002590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fd67 	bl	8000a74 <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fb0:	08002628 	.word	0x08002628
  ldr r2, =_sbss
 8000fb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fb8:	20000118 	.word	0x20000118

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f923 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff ff4c 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f93b 	bl	8001286 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f903 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000005c 	.word	0x2000005c
 8001044:	20000064 	.word	0x20000064
 8001048:	20000060 	.word	0x20000060

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000064 	.word	0x20000064
 800106c:	20000114 	.word	0x20000114

08001070 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000114 	.word	0x20000114

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <__NVIC_EnableIRQ+0x34>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff90 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff2d 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff42 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff35 	bl	80010e8 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e161      	b.n	8001578 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8150 	bne.w	8001572 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a97      	ldr	r2, [pc, #604]	; (8001534 <HAL_GPIO_Init+0x294>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d05e      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012dc:	4a95      	ldr	r2, [pc, #596]	; (8001534 <HAL_GPIO_Init+0x294>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d875      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012e2:	4a95      	ldr	r2, [pc, #596]	; (8001538 <HAL_GPIO_Init+0x298>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d058      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012e8:	4a93      	ldr	r2, [pc, #588]	; (8001538 <HAL_GPIO_Init+0x298>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d86f      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012ee:	4a93      	ldr	r2, [pc, #588]	; (800153c <HAL_GPIO_Init+0x29c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d052      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012f4:	4a91      	ldr	r2, [pc, #580]	; (800153c <HAL_GPIO_Init+0x29c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d869      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012fa:	4a91      	ldr	r2, [pc, #580]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d04c      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 8001300:	4a8f      	ldr	r2, [pc, #572]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d863      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001306:	4a8f      	ldr	r2, [pc, #572]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d046      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 800130c:	4a8d      	ldr	r2, [pc, #564]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d85d      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001312:	2b12      	cmp	r3, #18
 8001314:	d82a      	bhi.n	800136c <HAL_GPIO_Init+0xcc>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d859      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <HAL_GPIO_Init+0x80>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	0800139b 	.word	0x0800139b
 8001324:	08001375 	.word	0x08001375
 8001328:	08001387 	.word	0x08001387
 800132c:	080013c9 	.word	0x080013c9
 8001330:	080013cf 	.word	0x080013cf
 8001334:	080013cf 	.word	0x080013cf
 8001338:	080013cf 	.word	0x080013cf
 800133c:	080013cf 	.word	0x080013cf
 8001340:	080013cf 	.word	0x080013cf
 8001344:	080013cf 	.word	0x080013cf
 8001348:	080013cf 	.word	0x080013cf
 800134c:	080013cf 	.word	0x080013cf
 8001350:	080013cf 	.word	0x080013cf
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013cf 	.word	0x080013cf
 800135c:	080013cf 	.word	0x080013cf
 8001360:	080013cf 	.word	0x080013cf
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001391 	.word	0x08001391
 800136c:	4a76      	ldr	r2, [pc, #472]	; (8001548 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001372:	e02c      	b.n	80013ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e029      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e024      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	3308      	adds	r3, #8
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e01f      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	330c      	adds	r3, #12
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e01a      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013a2:	2304      	movs	r3, #4
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e013      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	611a      	str	r2, [r3, #16]
          break;
 80013ba:	e009      	b.n	80013d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	615a      	str	r2, [r3, #20]
          break;
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          break;
 80013ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d801      	bhi.n	80013da <HAL_GPIO_Init+0x13a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_Init+0x13e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d802      	bhi.n	80013ec <HAL_GPIO_Init+0x14c>
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x152>
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3b08      	subs	r3, #8
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	210f      	movs	r1, #15
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	6a39      	ldr	r1, [r7, #32]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80a9 	beq.w	8001572 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001420:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_GPIO_Init+0x2ac>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a49      	ldr	r2, [pc, #292]	; (800154c <HAL_GPIO_Init+0x2ac>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2ac>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001438:	4a45      	ldr	r2, [pc, #276]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x2b4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1e0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <HAL_GPIO_Init+0x2bc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1d8>
 8001474:	2302      	movs	r3, #2
 8001476:	e004      	b.n	8001482 <HAL_GPIO_Init+0x1e2>
 8001478:	2303      	movs	r3, #3
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x1e2>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_GPIO_Init+0x1e2>
 8001480:	2300      	movs	r3, #0
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4093      	lsls	r3, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001492:	492f      	ldr	r1, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	492b      	ldr	r1, [pc, #172]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4927      	ldr	r1, [pc, #156]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4921      	ldr	r1, [pc, #132]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	491d      	ldr	r1, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4917      	ldr	r1, [pc, #92]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4913      	ldr	r1, [pc, #76]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 8001514:	4013      	ands	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01f      	beq.n	8001564 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	490d      	ldr	r1, [pc, #52]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e01f      	b.n	8001572 <HAL_GPIO_Init+0x2d2>
 8001532:	bf00      	nop
 8001534:	10320000 	.word	0x10320000
 8001538:	10310000 	.word	0x10310000
 800153c:	10220000 	.word	0x10220000
 8001540:	10210000 	.word	0x10210000
 8001544:	10120000 	.word	0x10120000
 8001548:	10110000 	.word	0x10110000
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000
 8001554:	40010800 	.word	0x40010800
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40011000 	.word	0x40011000
 8001560:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	43db      	mvns	r3, r3
 800156c:	4909      	ldr	r1, [pc, #36]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800156e:	4013      	ands	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f ae96 	bne.w	80012b4 <HAL_GPIO_Init+0x14>
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	372c      	adds	r7, #44	; 0x2c
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d6:	787b      	ldrb	r3, [r7, #1]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	041a      	lsls	r2, r3, #16
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	611a      	str	r2, [r3, #16]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e272      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8087 	beq.w	8001726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001624:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
 8001630:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b89      	ldr	r3, [pc, #548]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06c      	beq.n	8001724 <HAL_RCC_OscConfig+0x12c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d168      	bne.n	8001724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e24c      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x76>
 8001660:	4b80      	ldr	r3, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7f      	ldr	r2, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e02e      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7a      	ldr	r2, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b78      	ldr	r3, [pc, #480]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0xbc>
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a67      	ldr	r2, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fccc 	bl	8001070 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fcc8 	bl	8001070 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e200      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xe4>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fcb8 	bl	8001070 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fcb4 	bl	8001070 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1ec      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x10c>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1c0      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4939      	ldr	r1, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fc6d 	bl	8001070 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fc69 	bl	8001070 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1a1      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4927      	ldr	r1, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc4c 	bl	8001070 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fc48 	bl	8001070 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e180      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d03a      	beq.n	800187c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d019      	beq.n	8001842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fc2c 	bl	8001070 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fc28 	bl	8001070 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e160      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f000 faa6 	bl	8001d8c <RCC_Delay>
 8001840:	e01c      	b.n	800187c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fc12 	bl	8001070 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fc0e 	bl	8001070 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d908      	bls.n	8001870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e146      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	42420000 	.word	0x42420000
 800186c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e9      	bne.n	8001850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a6 	beq.w	80019d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a87      	ldr	r2, [pc, #540]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fbcf 	bl	8001070 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7ff fbcb 	bl	8001070 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e103      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x312>
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e02d      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x334>
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a66      	ldr	r2, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	e01c      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x356>
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e00b      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a57      	ldr	r2, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb7f 	bl	8001070 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff fb7b 	bl	8001070 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0b1      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCC_OscConfig+0x37e>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb69 	bl	8001070 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fb65 	bl	8001070 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e09b      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d061      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d146      	bne.n	8001a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb39 	bl	8001070 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fb35 	bl	8001070 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e06d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d108      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4921      	ldr	r1, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a19      	ldr	r1, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	491b      	ldr	r1, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb09 	bl	8001070 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff fb05 	bl	8001070 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e03d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46a>
 8001a80:	e035      	b.n	8001aee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff faf2 	bl	8001070 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff faee 	bl	8001070 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e026      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x498>
 8001aae:	e01e      	b.n	8001aee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e019      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x500>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d0      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e073      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4936      	ldr	r1, [pc, #216]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff fa40 	bl	8001070 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff fa3c 	bl	8001070 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e053      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d210      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f99e 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08002610 	.word	0x08002610
 8001cc8:	2000005c 	.word	0x2000005c
 8001ccc:	20000060 	.word	0x20000060

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xac>)
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ce0:	f240 2301 	movw	r3, #513	; 0x201
 8001ce4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x46>
 8001d0e:	e02b      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	e02b      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3328      	adds	r3, #40	; 0x28
 8001d20:	443b      	add	r3, r7
 8001d22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0c5b      	lsrs	r3, r3, #17
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	3328      	adds	r3, #40	; 0x28
 8001d3e:	443b      	add	r3, r7
 8001d40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d4a:	fb03 f202 	mul.w	r2, r3, r2
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e004      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	623b      	str	r3, [r7, #32]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6a:	623b      	str	r3, [r7, #32]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc90      	pop	{r4, r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	08002600 	.word	0x08002600
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	003d0900 	.word	0x003d0900

08001d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <RCC_Delay+0x34>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <RCC_Delay+0x38>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a5b      	lsrs	r3, r3, #9
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da8:	bf00      	nop
  }
  while (Delay --);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	60fa      	str	r2, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f9      	bne.n	8001da8 <RCC_Delay+0x1c>
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	2000005c 	.word	0x2000005c
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e041      	b.n	8001e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff f864 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 fa6a 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d001      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e035      	b.n	8001eec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_TIM_Base_Start_IT+0x90>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eaa:	d004      	beq.n	8001eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_TIM_Base_Start_IT+0x94>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d111      	bne.n	8001eda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d010      	beq.n	8001eea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	e007      	b.n	8001eea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f9b1 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9a4 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9b3 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f987 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f97a 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f989 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0208 	mvn.w	r2, #8
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f95d 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f950 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f95f 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0210 	mvn.w	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2208      	movs	r2, #8
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f933 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f926 	bl	8002298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f935 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fe0e 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa67 	bl	800257e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8f9 	bl	80022ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d107      	bne.n	8002108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0220 	mvn.w	r2, #32
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa32 	bl	800256c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x18>
 8002124:	2302      	movs	r3, #2
 8002126:	e0b3      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x180>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d03e      	beq.n	80021e0 <HAL_TIM_ConfigClockSource+0xd0>
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	f200 8087 	bhi.w	8002278 <HAL_TIM_ConfigClockSource+0x168>
 800216a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216e:	f000 8085 	beq.w	800227c <HAL_TIM_ConfigClockSource+0x16c>
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d87f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d01a      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0xa2>
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d87b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d050      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x116>
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d877      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 8002188:	2b50      	cmp	r3, #80	; 0x50
 800218a:	d03c      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xf6>
 800218c:	2b50      	cmp	r3, #80	; 0x50
 800218e:	d873      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d058      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x136>
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d86f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d064      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x156>
 800219c:	2b30      	cmp	r3, #48	; 0x30
 800219e:	d86b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d060      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x156>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d867      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05c      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x156>
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d05a      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021b0:	e062      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f000 f95c 	bl	800247e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	609a      	str	r2, [r3, #8]
      break;
 80021de:	e04e      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f000 f945 	bl	800247e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002202:	609a      	str	r2, [r3, #8]
      break;
 8002204:	e03b      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f8bc 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2150      	movs	r1, #80	; 0x50
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f913 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 8002224:	e02b      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f8da 	bl	80023ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2160      	movs	r1, #96	; 0x60
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f903 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 8002244:	e01b      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f000 f89c 	bl	8002390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f8f3 	bl	800244a <TIM_ITRx_SetConfig>
      break;
 8002264:	e00b      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f000 f8ea 	bl	800244a <TIM_ITRx_SetConfig>
        break;
 8002276:	e002      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002278:	bf00      	nop
 800227a:	e000      	b.n	800227e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800227c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a25      	ldr	r2, [pc, #148]	; (8002388 <TIM_Base_SetConfig+0xa8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d007      	beq.n	8002308 <TIM_Base_SetConfig+0x28>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d003      	beq.n	8002308 <TIM_Base_SetConfig+0x28>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a22      	ldr	r2, [pc, #136]	; (800238c <TIM_Base_SetConfig+0xac>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d108      	bne.n	800231a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <TIM_Base_SetConfig+0xa8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x52>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x52>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <TIM_Base_SetConfig+0xac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <TIM_Base_SetConfig+0xa8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40000400 	.word	0x40000400

08002390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f023 0201 	bic.w	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f023 030a 	bic.w	r3, r3, #10
 80023cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	621a      	str	r2, [r3, #32]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f023 0210 	bic.w	r2, r3, #16
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	031b      	lsls	r3, r3, #12
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	f043 0307 	orr.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002498:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	021a      	lsls	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e041      	b.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d004      	beq.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10c      	bne.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	4313      	orrs	r3, r2
 800253c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400

0800256c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <__libc_init_array>:
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	2600      	movs	r6, #0
 8002594:	4d0c      	ldr	r5, [pc, #48]	; (80025c8 <__libc_init_array+0x38>)
 8002596:	4c0d      	ldr	r4, [pc, #52]	; (80025cc <__libc_init_array+0x3c>)
 8002598:	1b64      	subs	r4, r4, r5
 800259a:	10a4      	asrs	r4, r4, #2
 800259c:	42a6      	cmp	r6, r4
 800259e:	d109      	bne.n	80025b4 <__libc_init_array+0x24>
 80025a0:	f000 f822 	bl	80025e8 <_init>
 80025a4:	2600      	movs	r6, #0
 80025a6:	4d0a      	ldr	r5, [pc, #40]	; (80025d0 <__libc_init_array+0x40>)
 80025a8:	4c0a      	ldr	r4, [pc, #40]	; (80025d4 <__libc_init_array+0x44>)
 80025aa:	1b64      	subs	r4, r4, r5
 80025ac:	10a4      	asrs	r4, r4, #2
 80025ae:	42a6      	cmp	r6, r4
 80025b0:	d105      	bne.n	80025be <__libc_init_array+0x2e>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b8:	4798      	blx	r3
 80025ba:	3601      	adds	r6, #1
 80025bc:	e7ee      	b.n	800259c <__libc_init_array+0xc>
 80025be:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c2:	4798      	blx	r3
 80025c4:	3601      	adds	r6, #1
 80025c6:	e7f2      	b.n	80025ae <__libc_init_array+0x1e>
 80025c8:	08002620 	.word	0x08002620
 80025cc:	08002620 	.word	0x08002620
 80025d0:	08002620 	.word	0x08002620
 80025d4:	08002624 	.word	0x08002624

080025d8 <memset>:
 80025d8:	4603      	mov	r3, r0
 80025da:	4402      	add	r2, r0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d100      	bne.n	80025e2 <memset+0xa>
 80025e0:	4770      	bx	lr
 80025e2:	f803 1b01 	strb.w	r1, [r3], #1
 80025e6:	e7f9      	b.n	80025dc <memset+0x4>

080025e8 <_init>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr

080025f4 <_fini>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr
